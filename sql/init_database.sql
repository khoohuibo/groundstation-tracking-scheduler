DROP DATABASE IF EXISTS "gs-scheduler";
DROP USER IF EXISTS phil;

CREATE DATABASE "gs-scheduler";
CREATE USER phil;

\c "gs-scheduler";

CREATE TYPE tle_set AS (
  line0 text,
  line1 text
);

CREATE TABLE spacecraft
(
  id int GENERATED BY DEFAULT AS IDENTITY,
  name character varying(250) NOT NULL,
  priority integer NOT NULL,
  frequencies double precision[],
  tle_catalog_id integer,
  tle_lines tle_set,
  tle_updated timestamp without time zone NOT NULL DEFAULT TIMESTAMP 'epoch',
  tle_epoch timestamp without time zone NOT NULL DEFAULT TIMESTAMP 'epoch',
  track_updated timestamp without time zone NOT NULL DEFAULT TIMESTAMP 'epoch',
  track_epoch timestamp without time zone NOT NULL DEFAULT TIMESTAMP 'epoch',
  CONSTRAINT pkey_spacecraft PRIMARY KEY (id)
);

-- Earth-centred inertial
CREATE TYPE eci_set AS (
  x double precision,
  y double precision,
  z double precision
);

CREATE TYPE spacecraft_vector AS (
  position eci_set,
  velocity eci_set -- integer per second
);

-- Horizontal co-ordinate (Radians)
CREATE TYPE hc_set AS (
  azimuth double precision,
  elevation double precision
);

CREATE TYPE observation_vector AS (
  position hc_set,
  velocity hc_set
);

CREATE TYPE wgs_position AS (
  latitude double precision,
  longitude double precision,
  altitude double precision
);
/*
CREATE OR REPLACE FUNCTION
  spacecraft_observation( spacecraft_vector, wgs_position )
RETURNS
  observation_vector
AS
  'example.so', 'c_complex_add'
LANGUAGE
  C
STRICT
IMMUTABLE;
*/
CREATE TABLE positions
(
  time timestamp without time zone NOT NULL,
  spacecraft integer NOT NULL,
  vector spacecraft_vector NOT NULL,
  FOREIGN KEY (spacecraft) REFERENCES spacecraft (id) ON DELETE CASCADE,
  UNIQUE (spacecraft, time)
);

CREATE TABLE observations
(
  time timestamp without time zone NOT NULL,
  spacecraft integer NOT NULL,
  vector observation_vector NOT NULL,
  relative_velocity double precision NOT NULL,
  FOREIGN KEY (spacecraft) REFERENCES spacecraft (id) ON DELETE CASCADE,
  UNIQUE (spacecraft, time)
);

CREATE TYPE schedule_state_enum AS ENUM ('idle', 'aligning', 'tracking', 'returning');

CREATE table schedule
(
  time timestamp without time zone NOT NULL,
  spacecraft integer NOT NULL,
  state schedule_state_enum NOT NULL,
  FOREIGN KEY (spacecraft) REFERENCES spacecraft (id) ON DELETE CASCADE,
  UNIQUE (spacecraft, time)
);

CREATE table schedule_meta
(
  onerow_select bool PRIMARY KEY DEFAULT TRUE,
  updated timestamp without time zone NOT NULL DEFAULT TIMESTAMP 'epoch',
  CONSTRAINT onerow_unique CHECK (onerow_select)
);

INSERT into schedule_meta (updated) VALUES (timestamp 'epoch');

GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO phil;